{"version":3,"sources":["webpack:///./js/promisification-1.js","webpack:///./js/promisification-2.js","webpack:///./js/promisification-3.js","webpack:///./js/timer.js","webpack:///./js/color-switch.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch","refs","days","document","querySelector","hours","mins","secs","onTick","this","targetDate","Date","start","setInterval","currentTime","now","timeClockface","getTimeComponents","pad","value","String","padStart","textContent","colors","btnId","isActive","startBtnRef","stopBtnRef","addEventListener","randomColor","length","body","style","backgroundColor","clearInterval"],"mappings":"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","file":"main.a6a3acdc698746f989ab.js","sourcesContent":["const delay = ms => {\r\n    // return new Promise(resolve => setTimeout(resolve(ms), ms));\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(ms)\r\n      }, ms)\r\n})};\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName) => {\r\n//   return new Promise((resolve) => {\r\n//     const updatedUsers = allUsers.map(user => {\r\n//       if (user.name === userName) {\r\n//         resolve({ ...user, active: !user.active });\r\n//       }else(\r\n//         updatedUsers.push(user)\r\n//       )\r\n//     });\r\n//     return updatedUsers;\r\n//   });\r\n// };\r\nconst toggleUserState = (allUsers, userName) =>{\r\n    return new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map(user => {\r\n            if (user.name === userName) {\r\n                resolve({ ...user, active: !user.active })\r\n            }else{\r\n                return user;\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n\r\n\r\n// const users = [\r\n//     { name: 'Mango', active: true },\r\n//     { name: 'Poly', active: false },\r\n//     { name: 'Ajax', active: true },\r\n//     { name: 'Lux', active: false },\r\n//   ];\r\n  \r\n//   const toggleUserState = (allUsers, userName, callback) => {\r\n//     const updatedUsers = allUsers.map(user =>\r\n//       user.name === userName ? { ...user, active: !user.active } : user,\r\n//     );\r\n  \r\n//     callback(updatedUsers);\r\n//   };\r\n  \r\n//   const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n//   /*\r\n//    * Сейчас работает так\r\n//    */\r\n//   toggleUserState(users, 'Mango', logger);\r\n//   toggleUserState(users, 'Lux', logger);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      return new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if (canProcess) {\r\n            resolve({id: transaction.id, time: delay});\r\n            } else {\r\n            reject(transaction.id);\r\n            }\r\n          }, delay);\r\n        })\r\n}\r\n\r\n  const logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n \r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\n /*\r\n   * Работает так\r\n   */\r\n//   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n//   makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n//   makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n//   makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Должно работать так\r\n   */","const refs = {\r\n    days: document.querySelector('span[data-value=\"days\"]'),\r\n    hours: document.querySelector('span[data-value=\"hours\"]'),\r\n    mins: document.querySelector('span[data-value=\"mins\"]'),\r\n    secs: document.querySelector('span[data-value=\"secs\"]'),\r\n}\r\n\r\nclass Timer{\r\n    constructor({onTick}){\r\n        this.targetDate = new Date('April 01, 2021');\r\n        this.onTick = onTick;\r\n    }\r\n    start(){\r\n        setInterval(() => {\r\n            const currentTime = Date.now();\r\n            const time = this.targetDate - currentTime;\r\n            const timeClockface = this.getTimeComponents(time);\r\n          //   updateClockface(timeClockface);\r\n          this.onTick(timeClockface);\r\n          }, 1000);\r\n    }\r\n    getTimeComponents(time){\r\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n        return {days, hours, mins, secs};\r\n    };\r\n    pad(value){\r\n        return String(value).padStart(2, '0');\r\n    };\r\n}\r\n\r\nconst countdownTimer = new Timer({\r\n    onTick: updateClockface,\r\n});\r\ncountdownTimer.start();\r\n\r\nfunction updateClockface({days, hours, mins, secs}){\r\n    refs.days.textContent = days;\r\n    refs.hours.textContent = hours;\r\n    refs.mins.textContent = mins;\r\n    refs.secs.textContent = secs;\r\n}\r\n","const colors = [\r\n    '#FFFFFF',\r\n    '#2196F3',\r\n    '#4CAF50',\r\n    '#FF9800',\r\n    '#009688',\r\n    '#795548',\r\n  ];\r\n\r\nlet btnId = null;\r\nlet isActive = false;\r\nconst startBtnRef = document.querySelector('button[data-action=\"start\"]');\r\nconst stopBtnRef = document.querySelector('button[data-action=\"stop\"]');\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n// console.log(colors[randomIntegerFromInterval(1, colors.length)]); \r\n\r\nstartBtnRef.addEventListener('click', startBtnHandler);\r\n\r\nfunction startBtnHandler(){\r\n    if(isActive){\r\n        return;\r\n    };\r\n    isActive = true;\r\n    btnId = setInterval(()=> {\r\n        const randomColor = colors[randomIntegerFromInterval(1, colors.length)-1];\r\n        document.body.style.backgroundColor = randomColor;\r\n        console.log(randomColor); \r\n    }, 1000);\r\n}\r\n\r\nstopBtnRef.addEventListener('click', stopBtnHandler);\r\n\r\nfunction stopBtnHandler(){\r\n    clearInterval(btnId);\r\n    isActive = false;\r\n}\r\n\r\n"],"sourceRoot":""}